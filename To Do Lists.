#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Structure to represent a task
struct Task {
    string description;
    bool isCompleted;
};

// Function to add a task to the list
void addTask(vector<Task>& taskList) {
    Task newTask;
    cout << "Enter task description: ";
    getline(cin, newTask.description);
    newTask.isCompleted = false;
    taskList.push_back(newTask);
    cout << "Task added successfully!" << endl;
}

// Function to view tasks
void viewTasks(const vector<Task>& taskList) {
    cout << "Task List:" << endl;
    for (int i = 0; i < taskList.size(); i++) {
        cout << "[" << (taskList[i].isCompleted ? "X" : " ") << "] " << taskList[i].description << endl;
    }
}

// Function to mark a task as completed
void markTaskAsCompleted(vector<Task>& taskList) {
    int taskIndex;
    cout << "Enter task index to mark as completed: ";
    cin >> taskIndex;
    if (taskIndex >= 0 && taskIndex < taskList.size()) {
        taskList[taskIndex].isCompleted = true;
        cout << "Task marked as completed!" << endl;
    } else {
        cout << "Invalid task index!" << endl;
    }
}

// Function to remove a task
void removeTask(vector<Task>& taskList) {
    int taskIndex;
    cout << "Enter task index to remove: ";
    cin >> taskIndex;
    if (taskIndex >= 0 && taskIndex < taskList.size()) {
        taskList.erase(taskList.begin() + taskIndex);
        cout << "Task removed successfully!" << endl;
    } else {
        cout << "Invalid task index!" << endl;
    }
}

int main() {
    vector<Task> taskList;

    while (true) {
        cout << "To-Do List Manager" << endl;
        cout << "-----------------" << endl;
        cout << "1. Add Task" << endl;
        cout << "2. View Tasks" << endl;
        cout << "3. Mark Task as Completed" << endl;
        cout << "4. Remove Task" << endl;
        cout << "5. Exit" << endl;
        cout << "Choose an option: ";

        int option;
        cin >> option;

        switch (option) {
            case 1:
                addTask(taskList);
                break;
            case 2:
                viewTasks(taskList);
                break;
            case 3:
                markTaskAsCompleted(taskList);
                break;
            case 4:
                removeTask(taskList);
                break;
            case 5:
                cout << "Goodbye!" << endl;
                return 0;
            default:
                cout << "Invalid option!" << endl;
        }

        cout << endl;
    }

    return 0;
}
